// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  Novo
  Contatado
  Interessado
  Negociacao
  Vendido
}

enum ImageCategory {
  PatrocinadorOuro
  ApoioInstitucional
  Parceiros
}

model User {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  hashedPassword String
  image          String?
  Posts          Posts[]
  Logs           Log[]
}

model ExpoForm {
  id        Int      @id @default(autoincrement())
  nome      String
  empresa   String
  ramo      String
  telefone  String
  email     String
  status    Status   @default(Novo)
  createdAt DateTime @default(now())
}

model MainPost {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String
  public_id String
  createdAt DateTime @default(now())
}

model SobreNosPage {
  id     Int     @id @default(autoincrement())
  ativo  Boolean @default(false)
  pagina String  @db.Text
}

model Empresas {
  id        Int      @id @default(autoincrement())
  url       String
  public_id String
  nome      String
  email     String?
  instagram String?
  telefone  String?
  whatsapp  String?
  endereco  String?
  cidade    String?
  estado    String?
  createdAt DateTime @default(now())
}

model Albuns {
  id        Int      @id @default(autoincrement())
  nome      String
  nomeMenu  String
  link      String   @unique
  createdAt DateTime @default(now())
  photos    Photos[]
}

model Photos {
  id        Int      @id @default(autoincrement())
  url       String
  public_id String
  createdAt DateTime @default(now())
  Albuns    Albuns?  @relation(fields: [albunsId], references: [id])
  albunsId  Int?
}

model SetoresImages {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String
  public_id String
  createdAt DateTime @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  pergunta  String
  resposta  String   @db.Text
  createdAt DateTime @default(now())
}

model ExpositorFiles {
  id              Int      @id @default(autoincrement())
  url_image       String
  public_id_image String
  url_video       String
  public_id_video String
  url_pdf         String
  public_id_pdf   String
  createdAt       DateTime @default(now())
}

model HomeVideo {
  id              Int      @id @default(autoincrement())
  url_video       String
  public_id_video String
  title           String?
  createdAt       DateTime @default(now())
}

model Posts {
  id          Int           @id @default(autoincrement())
  title       String
  content     String        @db.LongText
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  User        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  ImagensPost ImagensPost[]
}

model ImagensPost {
  id        Int      @id @default(autoincrement())
  url       String
  public_id String
  createdAt DateTime @default(now())
  Posts     Posts?   @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId   Int?
}

model SmallImages {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?       @db.Text
  url             String?
  category        ImageCategory
  image_url       String
  image_public_id String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  action    String
  details   Json
  ip        String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model UsuariosInteresados {
  id              String    @id @default(cuid())
  name            String
  cpf             String    @unique
  contact         String
  email           String?
  empresasParceiras String?
  acceptedTerms   Boolean   @default(false)
  acceptedTermsAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("usuarios_interesados")
  @@index([cpf])
}

